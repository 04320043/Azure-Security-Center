<#  
.SYNOPSIS  
  This script will create new Qualys or Rapid7 vulnerability assessment (VA) solution in Azure Security Center (ASC).
     
.DESCRIPTION  
  ASC contract VA solution is provided as an integration service. This script uses REAST API to create new Security Solution in ASC.
  The solution requires a license and a key provided by the 3rd party VA provider: Qualys or Rapid7
  Note that only one solution can be created per license. An attempt to create another solution using the same name/license/key will fail.
  
.PARAMETER SubscriptionId
  The subscriptionID of the Azure Subscription that contains the resources you want to analyze

.PARAMETER ResourceGroupName
  Mandatory. It can be any EXISTING resource group. using ASC default "DefaultResourceGroup-XXX" is one option.
  Note: Since the ASC VA solution is not Azure resource it will not be listed under the resource group, but still it is attached to it.

.PARAMETER vaSolutionName
  The name of the new solution

.PARAMETER vaType
  Qualys or Rapid7

.PARAMETER autoUpdate
  Turn solution Austo deploy. 
  When On every new VM to the subscription will be automatically attempted to link to the solution.
  Default: False

.PARAMETER licenceCode
  VA License string
  
.PARAMETER publicKey

  
  
.EXAMPLE
  .\Read-AzStorageTransactions.ps1 -SubscriptionId "fd2323a9-2324-4d2a-90f6-7e6c2fe03512" -ResourceGroup "RGName"
  Enumerate metrics for all storage accounts in the Resource group in the specified Subscription.
  
.EXAMPLE
  .\Read-AzStorageTransactions.ps1 -SubscriptionId "fd2323a9-2324-4d2a-90f6-7e6c2fe03512"
  Enumerate metrics for all storage accounts in the specified Subscription.

.EXAMPLE
  .\Read-AzStorageTransactions.ps1 -Tenant
  Enumerate metrics for all storage accounts in all subscriptions.

.NOTES
   AUTHOR: Eli Sagie - ASC EEE 
   LASTEDIT: April 14, 2020 1.0
    - Initial Release
    - Special tanks to Arik Riklin!

.LINK
    This script posted to and discussed at the following locations:
    https://github.com/JimGBritt/Azure-Security-Center
#>

# Prerequisites
# Install-module Az
# Install-module Az.security


param (
	[Parameter(Mandatory = $true)]
	[string]$subscriptionId,
	
	[Parameter(Mandatory = $true)]
	[string]$resourceGroupName,
	
	[Parameter(Mandatory = $true)]
	[string]$vaSolutionName,
	
	[Parameter(Mandatory = $true)]
	[ValidateSet('Qualys','Rapid7')]
	[string]$vaType,

	[ValidateSet('true','false')]
	[string]$autoUpdate = "false",	
	
	[Parameter(Mandatory = $true)]
	# If Rapid7 provide the ConfigZipFileInBase64 
	[string]$licenceCode,
	
	[Parameter(Mandatory = $true)]
	[string]$publicKey
	)

# Connect and set Azure subscription authentication token
# In case you have logged in to different tenant/subscription: Exception calling "AcquireAccessToken" with "1" argument(s): "multiple_matching_tokens_detected: The cache contains multiple tokens satisfying the requirements.
# Remove previous token cache:
# $azProfile = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.ResetDefaultProfile()

function Get-AzCachedAccessToken()
{
	$azProfile = [Microsoft.Azure.Commands.Common.Authentication.Abstractions.AzureRmProfileProvider]::Instance.Profile
	$currentAzureContext = Get-AzContext
	$profileClient = New-Object Microsoft.Azure.Commands.ResourceManager.Common.RMProfileClient($azProfile)
	Write-Debug ("Getting access token for tenant" + $currentAzureContext.Subscription.TenantId)
	$token = $profileClient.AcquireAccessToken($currentAzureContext.Subscription.TenantId)
	$token.AccessToken
	$accessToken = "Bearer " + $($token.AccessToken)
}
	$token = Get-AzCachedAccessToken

#Variable declaration
	$requestHeader = @{
	  "Authorization" = "Bearer " + $token
	  "Content-Type" = "application/json"
	}

	$loc = (Get-AzSecurityLocation).Name

	if ($vaType -eq "Qualys") {$vaTemplate = "qualys.qualysAgent"}
	if ($vaType -eq "Rapid7") {$vaTemplate = "rapid7.insightplatform"}

$jsonBody = @"
{
    Properties: {
        Location: "$($loc)",
        Template: "$($vaTemplate)",
        ProvisioningParameters: 
			"{\"licenseCode\":\"$($licenceCode)\",\"publicKey\":\"$($publicKey)\",\"autoUpdate\":$($autoUpdate)}"
    }
}
"@

#Invoke
	$restUri = "https://management.azure.com/subscriptions/" + $subscriptionId + "/resourceGroups/" + $resourceGroupName + "/providers/Microsoft.Security/locations/centralus/securitySolutions/" + $vaSolutionName + "?api-version=2015-06-01-preview"
	Invoke-RestMethod -Uri $restUri -Method PUT -Headers $requestHeader -Body $jsonBody

# Delete solution
# Comment-out the above PUT invocation and uncomment this invoke command
	#Invoke-RestMethod -Uri $restUri -Method DELETE -Headers $requestHeader
